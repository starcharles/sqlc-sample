// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createEntry = `-- name: CreateEntry :execresult
INSERT INTO entries (content)
VALUES (?)
`

func (q *Queries) CreateEntry(ctx context.Context, content string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEntry, content)
}

const getEntries = `-- name: GetEntries :many
SELECT id, content, created_at
FROM entries
ORDER BY created_at DESC
LIMIT ?
`

func (q *Queries) GetEntries(ctx context.Context, limit int32) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getEntries, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(&i.ID, &i.Content, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
